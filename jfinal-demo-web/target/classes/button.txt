"{\n" +
"    \"button\": [\n" +
"        {\n" +
"            \"name\": \"google\",\n" +
"            \"url\": \"http://www.google.com\",\n" +
"            \"type\": \"view\"\n" +
"        },\n" +
"        {\n" +
"            \"name\": \"goolge\",\n" +
"            \"key\": \"112\",\n" +
"          \"type\": \"click\"\n" +
"        },\n" +
"        {\n" +
"          \"name\": \"举报\",\n" +
"          \"sub_button\":[\n" +
"               {\n" +
"                \"type\":\"click\",\n"+
"                \"name\":\"开始举报\",\n"+
"                \"key\":\"TipReport_start\"\n"+
"               },\n"+
"               {\n" +
"                \"type\":\"click\",\n"+
"                \"name\":\"结束举报\",\n"+
"                \"key\":\"TipReport_end\"\n"+
"               }\n"+
"          ]\n" +
"        }\n" +
"    ]\n" +
"}";
        //首先处理用户所处的状态
        //用户举报状态取消 对于是否是真实的举报信息，通过后台的数据处理来判断
//        String OpenID = inMenuEvent.getFromUserName();
//        String eventType = inMenuEvent.getEvent();
//        String eventKey = inMenuEvent.getEventKey();
//        if(InMenuEvent.EVENT_INMENU_CLICK.equals(eventType)){
//            WeChatUserService.updateIsSubscribe(OpenID,eventType,eventKey);
//            OutTextMsg outMsg = new OutTextMsg(inMenuEvent);
//            if("TipReport_start".equals(inMenuEvent.getEventKey())){
//                outMsg.setContent("举报模式已经开始,请发送您的举报信息-->picture");
//            }
//            else if("TipReport_end".equals(inMenuEvent.getEventKey())){
//                outMsg.setContent(("举报结束，谢谢！！！"));
//            }
//            else{
//                outMsg.setContent("请点击 >开始举报<");
//            }
//            render(outMsg);
//        }
//        else{
//            renderText("error");
//        }


github https://github.com/Tencent/weui


https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1445241432

081kbk0U0aiSUU10iPZT08am0U0kbk0S


https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx19e37fd297b61efd&redirect_uri=http://mstark.free.ngrok.cc/wPage/index&response_type=code&scope=snsapi_userinfo&state=wx#wechat_redirect

https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx19e37fd297b61efd&redirect_uri=http://mstark.free.ngrok.cc/wPage/index&response_type=code&scope=snsapi_userinfo&state=wx#wechat_redirect


https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx19e37fd297b61efd&redirect_uri=http://mstark.free.ngrok.cc/wPage/index&response_type=code&scope=snsapi_userinfo&state=homePage#wechat_redirect


https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx19e37fd297b61efd&redirect_uri=http://mstark.free.ngrok.cc/wPage/index&response_type=code&scope=snsapi_userinfo&state=tipReport#wechat_redirect

https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx19e37fd297b61efd&redirect_uri=http://mstark.free.ngrok.cc/wPage/index&response_type=code&scope=snsapi_userinfo&state=tipReport#wechat_redirect

错误日志：
在获取用户验证方面可能还存在问题，验证是否有效的问题？？？？？

用户关注信息重复录入


配置
token = mstark
appId = wx19e37fd297b61efd
appSecret = 1724d6912e655091642248c6e2ea9248
encryptMessage = false


        String str = "{\n" +
                "    \"button\": [\n" +
                "        {\n" +
                "            \"name\": \"Eye'on\",\n" +
                "            \"url\": \"http://www.google.com\",\n" +
                "            \"type\": \"view\"\n" +
                "        },\n" +
                "        {\n" +
                "            \"name\": \"历史消息\",\n" +
                "            \"key\": \"112\",\n" +
                "          \"type\": \"click\"\n" +
                "        },\n" +
                "        {\n" +
                "          \"name\": \"Eye'on网页\",\n" +
                "          \"url\":\""+this.authorizeURL+"\",\n"+
                "          \"type\":\"view\"\n"+
                "        }\n" +
                "    ]\n" +
                "}";




博客地址 https://blog.csdn.net/qq_38455201/article/details/80250017

        /**
         * Base64 encode / decode
         */
        function Base64() {
            // private property
            _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

            // public method for encoding
            this.encode = function (input) {
                var output = "";
                var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
                var i = 0;
                input = _utf8_encode(input);
                while (i < input.length) {
                    chr1 = input.charCodeAt(i++);
                    chr2 = input.charCodeAt(i++);
                    chr3 = input.charCodeAt(i++);
                    enc1 = chr1 >> 2;
                    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                    enc4 = chr3 & 63;
                    if (isNaN(chr2)) {
                        enc3 = enc4 = 64;
                    } else if (isNaN(chr3)) {
                        enc4 = 64;
                    }
                    output = output +
                        _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
                        _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
                }
                return output;
            }

            // public method for decoding
            this.decode = function (input) {
                var output = "";
                var chr1, chr2, chr3;
                var enc1, enc2, enc3, enc4;
                var i = 0;
                input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
                while (i < input.length) {
                    enc1 = _keyStr.indexOf(input.charAt(i++));
                    enc2 = _keyStr.indexOf(input.charAt(i++));
                    enc3 = _keyStr.indexOf(input.charAt(i++));
                    enc4 = _keyStr.indexOf(input.charAt(i++));
                    chr1 = (enc1 << 2) | (enc2 >> 4);
                    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                    chr3 = ((enc3 & 3) << 6) | enc4;
                    output = output + String.fromCharCode(chr1);
                    if (enc3 != 64) {
                        output = output + String.fromCharCode(chr2);
                    }
                    if (enc4 != 64) {
                        output = output + String.fromCharCode(chr3);
                    }
                }
                output = _utf8_decode(output);
                return output;
            }

            // private method for UTF-8 encoding
            _utf8_encode = function (string) {
                string = string.replace(/\r\n/g, "\n");
                var utftext = "";
                for (var n = 0; n < string.length; n++) {
                    var c = string.charCodeAt(n);
                    if (c < 128) {
                        utftext += String.fromCharCode(c);
                    } else if ((c > 127) && (c < 2048)) {
                        utftext += String.fromCharCode((c >> 6) | 192);
                        utftext += String.fromCharCode((c & 63) | 128);
                    } else {
                        utftext += String.fromCharCode((c >> 12) | 224);
                        utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                        utftext += String.fromCharCode((c & 63) | 128);
                    }

                }
                return utftext;
            }

            // private method for UTF-8 decoding
            _utf8_decode = function (utftext) {
                var string = "";
                var i = 0;
                var c = c1 = c2 = 0;
                while (i < utftext.length) {
                    c = utftext.charCodeAt(i);
                    if (c < 128) {
                        string += String.fromCharCode(c);
                        i++;
                    } else if ((c > 191) && (c < 224)) {
                        c2 = utftext.charCodeAt(i + 1);
                        string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                        i += 2;
                    } else {
                        c2 = utftext.charCodeAt(i + 1);
                        c3 = utftext.charCodeAt(i + 2);
                        string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                        i += 3;
                    }
                }
                return string;
            }
        }

        //1.加密
        var str = '需要加解密的内容';
        var base = new Base64();
        var result = base.encode(str);
        //2.解密
        var result2 = base.decode(result);